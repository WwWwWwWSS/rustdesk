name: CI

env:
#   MIN_SUPPORTED_RUST_VERSION: "1.46.0"
#   CICD_INTERMEDIATES_DIR: "_cicd-intermediates"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"
  push:
    branches:
      - master
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"
      - "res/**"
      - "appimage/**"
      - "flatpak/**"

jobs:
  # ensure_cargo_fmt:
  #   name: Ensure 'cargo fmt' has been run
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       default: true
  #       profile: minimal
  #       components: rustfmt
  #   - uses: actions/checkout@v3
  #   - run: cargo fmt -- --check

  # min_version:
  #   name: Minimum supported rust version
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Checkout source code
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: recursive

  #   - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}
  #       default: true
  #       profile: minimal # minimal component installation (ie, no documentation)
  #       components: clippy
  #   - name: Run clippy (on minimum supported rust version to prevent warnings we can't fix)
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: clippy
  #       args: --locked --all-targets --all-features -- --allow clippy::unknown_clippy_lints
  #   - name: Run tests
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: test
  #       args: --locked

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # 只保留 Windows 构建目标
          - { target: x86_64-pc-windows-msvc, os: windows-2022 }
          # 如果需要 32 位 Windows MSVC 构建，可以取消下面一行的注释
          # - { target: i686-pc-windows-msvc, os: windows-2022 }
    steps:
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 移除了 'Install prerequisites' 步骤，因为它只包含 Linux 命令

    - name: Setup vcpkg with Github Actions binary cache
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: /opt/artifacts/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        # 针对 Windows MSVC 明确安装所需依赖
        if [[ "${{ matrix.job.target }}" == *-pc-windows-* ]]; then
          ARCH="x64-windows-static"
          if [[ "${{ matrix.job.target }}" == "i686-pc-windows-"* ]]; then
            ARCH="x86-windows-static"
          fi
          $VCPKG_ROOT/vcpkg install opus:${ARCH} libvpx:${ARCH} libyuv:${ARCH} --x-install-root="$VCPKG_ROOT/installed"
        else
          # 为其他平台安装依赖
          $VCPKG_ROOT/vcpkg install opus:${{ matrix.job.target }} libvpx:${{ matrix.job.target }} libyuv:${{ matrix.job.target }} --x-install-root="$VCPKG_ROOT/installed"
        fi
      shell: bash

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.job.target }}
        components: ''

    - name: Show version information (Rust, cargo) # 移除 GCC 因为Windows MSVC 不默认提供
      shell: bash
      run: |
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V

    - uses: Swatinem/rust-cache@v2

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        # use-cross: ${{ matrix.job.use-cross }} # Windows 不需要 cross
        command: build
        args: --locked --target=${{ matrix.job.target }}

    - name: clean
      shell: bash
      run: |
        cargo clean

    # - name: Strip debug information from executable
    #   id: strip
    #   shell: bash
    #   run: |
    #     # Figure out suffix of binary
    #     EXE_suffix=""
    #     case ${{ matrix.job.target }} in
    #       *-pc-windows-*) EXE_suffix=".exe" ;;
    #     esac;

    #     # Figure out what strip tool to use if any
    #     STRIP="" # Windows MSVC 通常不需要单独的 strip 命令
    #     # case ${{ matrix.job.target }} in
    #     #   *-pc-windows-msvc) STRIP="" ;; # 确认是否需要 strip
    #     # esac;

    #     # Setup paths
    #     BIN_DIR="${{ env.CICD_INTERMEDIATES_DIR }}/stripped-release-bin/"
    #     mkdir -p "${BIN_DIR}"
    #     # 假设项目名称在环境变量中，或者直接硬编码 'rustdesk'
    #     BIN_NAME="rustdesk${EXE_suffix}"
    #     BIN_PATH="${BIN_DIR}/${BIN_NAME}"

    #     # Copy the release build binary to the result location
    #     # 注意 Windows 路径分隔符，但 Git Bash 通常能处理斜杠
    #     cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "${BIN_DIR}"

    #     # Also strip if possible
    #     # if [ -n "${STRIP}" ]; then
    #     #   "${STRIP}" "${BIN_PATH}"
    #     # fi

    #     # Let subsequent steps know where to find the (stripped) bin
    #     echo "::set-output name=BIN_PATH::${BIN_PATH}"
    #     echo "::set-output name=BIN_NAME::${BIN_NAME}"

    - name: Set testing options
      id: test-options
      shell: bash
      run: |
        # Windows testing options (可以根据需要调整)
        CARGO_TEST_OPTIONS="--workspace --no-fail-fast" # 移除了 Linux 特有的 skip
        # echo ::set-output name=CARGO_TEST_OPTIONS::${CARGO_TEST_OPTIONS} # deprecated
        echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_ENV
        echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_OUTPUT

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        # use-cross: ${{ matrix.job.use-cross }} # Windows 不需要 cross
        command: test
        args: --locked --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}
