name: CI

env:
#   MIN_SUPPORTED_RUST_VERSION: "1.46.0"
#   CICD_INTERMEDIATES_DIR: "_cicd-intermediates"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"
  # 设置覆盖端口路径
  VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/res/vcpkg"
  # 禁用遥测
  VCPKG_DISABLE_METRICS: "1"
  # 添加项目版本号环境变量
  APP_VERSION: "1.0.0"
  # 添加输出目录
  ARTIFACTS_DIR: "artifacts"

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"
  push:
    branches:
      - master
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "README.md"
      - "res/**"
      - "appimage/**"
      - "flatpak/**"

jobs:
  # ensure_cargo_fmt:
  #   name: Ensure 'cargo fmt' has been run
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       default: true
  #       profile: minimal
  #       components: rustfmt
  #   - uses: actions/checkout@v3
  #   - run: cargo fmt -- --check

  # min_version:
  #   name: Minimum supported rust version
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Checkout source code
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: recursive

  #   - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}
  #       default: true
  #       profile: minimal # minimal component installation (ie, no documentation)
  #       components: clippy
  #   - name: Run clippy (on minimum supported rust version to prevent warnings we can't fix)
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: clippy
  #       args: --locked --all-targets --all-features -- --allow clippy::unknown_clippy_lints
  #   - name: Run tests
  #     uses: actions-rs/cargo@v1
  #     with:
  #       command: test
  #       args: --locked

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # 只保留 Windows 构建目标
          - { target: x86_64-pc-windows-msvc, os: windows-2022 }
          # 如果需要 32 位 Windows MSVC 构建，可以取消下面一行的注释
          # - { target: i686-pc-windows-msvc, os: windows-2022 }
    steps:
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 移除了 'Install prerequisites' 步骤，因为它只包含 Linux 命令

    - name: Setup vcpkg with Github Actions binary cache
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: C:/vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        # 在Windows上启用vcpkg清单模式并设置正确的路径
        if [[ "${{ matrix.job.os }}" == windows* ]]; then
          echo "Installing vcpkg dependencies for Windows..."
          echo "Current workspace: ${{ github.workspace }}"
          echo "VCPKG_ROOT: $VCPKG_ROOT"
          
          # 使用正确的vcpkg triplet格式而非Rust目标格式
          # 将x86_64-pc-windows-msvc映射到x64-windows
          VCPKG_TRIPLET="x64-windows"
          if [[ "${{ matrix.job.target }}" == "i686-pc-windows-msvc" ]]; then
            VCPKG_TRIPLET="x86-windows"
          fi
          
          echo "使用vcpkg triplet: ${VCPKG_TRIPLET}"
          "${VCPKG_ROOT}/vcpkg" install --triplet=${VCPKG_TRIPLET} --overlay-ports="${{ github.workspace }}/res/vcpkg"
        else
          $VCPKG_ROOT/vcpkg install --triplet=${{ matrix.job.target }}
        fi
      shell: bash

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.job.target }}
        components: ''

    - name: Show version information (Rust, cargo) # 移除 GCC 因为Windows MSVC 不默认提供
      shell: bash
      run: |
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V

    - uses: Swatinem/rust-cache@v2

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        # use-cross: ${{ matrix.job.use-cross }} # Windows 不需要 cross
        command: build
        args: --locked --target=${{ matrix.job.target }}

    - name: Build Release Version
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --locked --target=${{ matrix.job.target }} --release

    # 新增 MSI 构建步骤 
    - name: Setup WiX Toolset
      if: matrix.job.os == 'windows-2022'
      run: |
        # 下载并安装最新的 WiX Toolset
        $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe"
        $wixInstaller = "$env:TEMP\wix311.exe"
        Invoke-WebRequest -Uri $wixUrl -OutFile $wixInstaller
        Start-Process -FilePath $wixInstaller -ArgumentList "/install","/quiet" -Wait
        # 添加 WiX bin 目录到 PATH
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -Append -FilePath $env:GITHUB_PATH
      shell: pwsh

    - name: Prepare MSI Build
      if: matrix.job.os == 'windows-2022'
      run: |
        # 创建输出目录
        mkdir -p ${{ env.ARTIFACTS_DIR }}
        
        # 复制必要的文件到临时目录
        $BUILD_DIR = "msi_build"
        mkdir -p $BUILD_DIR
        
        # 复制二进制文件
        cp target/${{ matrix.job.target }}/release/rustdesk.exe $BUILD_DIR/
        
        # 复制依赖文件和资源
        cp -r res/icon.ico $BUILD_DIR/
        
        # 显示文件列表
        ls -la $BUILD_DIR
      shell: bash

    - name: Build MSI Package
      if: matrix.job.os == 'windows-2022'
      run: |
        # 使用项目中的 WiX 配置文件或创建一个新的
        
        # 方法1: 如果项目已有 WiX 配置文件
        if [ -f "res/msi/rustdesk.wxs" ]; then
          echo "使用现有的 WiX 配置文件"
          
          # 编译 WiX 源文件
          candle.exe -arch x64 -ext WixUtilExtension \
            -dProductVersion=${{ env.APP_VERSION }} \
            -dBuildDir=msi_build \
            res/msi/rustdesk.wxs
          
          # 链接生成 MSI
          light.exe -ext WixUIExtension -ext WixUtilExtension \
            -cultures:zh-cn -out ${{ env.ARTIFACTS_DIR }}/rustdesk-${{ env.APP_VERSION }}-windows_x64.msi \
            rustdesk.wixobj
        else
          echo "创建新的 WiX 配置文件"
          
          # 创建一个基本的 WiX 配置文件
          cat > rustdesk.wxs <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="RustDesk" Language="2052" Version="${{ env.APP_VERSION }}" 
           Manufacturer="RustDesk Team" UpgradeCode="8363F5A0-8B78-4A52-B0E0-9CC1A6666D25">
    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />
    
    <MajorUpgrade DowngradeErrorMessage="已安装更新版本的 RustDesk。" />
    <MediaTemplate EmbedCab="yes" />
    
    <Feature Id="ProductFeature" Title="RustDesk" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef Id="ApplicationShortcut" />
    </Feature>
    
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLFOLDER" Name="RustDesk" />
      </Directory>
      <Directory Id="ProgramMenuFolder">
        <Directory Id="ApplicationProgramsFolder" Name="RustDesk"/>
      </Directory>
    </Directory>
    
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <Component Id="MainExecutable" Guid="*">
        <File Id="RustDeskEXE" Source="msi_build/rustdesk.exe" KeyPath="yes" />
        <!-- 可以在这里添加其他文件 -->
      </Component>
    </ComponentGroup>
    
    <DirectoryRef Id="ApplicationProgramsFolder">
      <Component Id="ApplicationShortcut" Guid="*">
        <Shortcut Id="ApplicationStartMenuShortcut" 
                  Name="RustDesk"
                  Description="远程桌面工具"
                  Target="[INSTALLFOLDER]rustdesk.exe"
                  WorkingDirectory="INSTALLFOLDER"/>
        <RemoveFolder Id="CleanUpShortCut" Directory="ApplicationProgramsFolder" On="uninstall"/>
        <RegistryValue Root="HKCU" Key="Software\RustDesk" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
      </Component>
    </DirectoryRef>
    
    <UIRef Id="WixUI_Minimal" />
    <WixVariable Id="WixUILicenseRtf" Value="license.rtf" />
  </Product>
</Wix>
EOF
          
          # 创建简单的许可证文件
          cat > license.rtf <<EOF
{\rtf1\ansi\ansicpg936\deff0\nouicompat\deflang1033\deflangfe2052{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 RustDesk 许可协议\par
版权所有 (c) RustDesk Team\par
此软件为自由软件，可以按照相应的协议使用和分发。\par
}
EOF
          
          # 编译 WiX 源文件
          candle.exe -arch x64 -ext WixUtilExtension rustdesk.wxs
          
          # 链接生成 MSI
          light.exe -ext WixUIExtension -ext WixUtilExtension \
            -cultures:zh-cn -out ${{ env.ARTIFACTS_DIR }}/rustdesk-${{ env.APP_VERSION }}-windows_x64.msi \
            rustdesk.wixobj
        fi
      shell: bash

    - name: Upload MSI Artifact
      if: matrix.job.os == 'windows-2022'
      uses: actions/upload-artifact@v3
      with:
        name: rustdesk-windows-msi
        path: ${{ env.ARTIFACTS_DIR }}/*.msi
        if-no-files-found: error

    - name: clean
      shell: bash
      run: |
        cargo clean

    # - name: Strip debug information from executable
    #   id: strip
    #   shell: bash
    #   run: |
    #     # Figure out suffix of binary
    #     EXE_suffix=""
    #     case ${{ matrix.job.target }} in
    #       *-pc-windows-*) EXE_suffix=".exe" ;;
    #     esac;

    #     # Figure out what strip tool to use if any
    #     STRIP="" # Windows MSVC 通常不需要单独的 strip 命令
    #     # case ${{ matrix.job.target }} in
    #     #   *-pc-windows-msvc) STRIP="" ;; # 确认是否需要 strip
    #     # esac;

    #     # Setup paths
    #     BIN_DIR="${{ env.CICD_INTERMEDIATES_DIR }}/stripped-release-bin/"
    #     mkdir -p "${BIN_DIR}"
    #     # 假设项目名称在环境变量中，或者直接硬编码 'rustdesk'
    #     BIN_NAME="rustdesk${EXE_suffix}"
    #     BIN_PATH="${BIN_DIR}/${BIN_NAME}"

    #     # Copy the release build binary to the result location
    #     # 注意 Windows 路径分隔符，但 Git Bash 通常能处理斜杠
    #     cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "${BIN_DIR}"

    #     # Also strip if possible
    #     # if [ -n "${STRIP}" ]; then
    #     #   "${STRIP}" "${BIN_PATH}"
    #     # fi

    #     # Let subsequent steps know where to find the (stripped) bin
    #     echo "::set-output name=BIN_PATH::${BIN_PATH}"
    #     echo "::set-output name=BIN_NAME::${BIN_NAME}"

    - name: Set testing options
      id: test-options
      shell: bash
      run: |
        # Windows testing options (可以根据需要调整)
        CARGO_TEST_OPTIONS="--workspace --no-fail-fast" # 移除了 Linux 特有的 skip
        # echo ::set-output name=CARGO_TEST_OPTIONS::${CARGO_TEST_OPTIONS} # deprecated
        echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_ENV
        echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_OUTPUT

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        # use-cross: ${{ matrix.job.use-cross }} # Windows 不需要 cross
        command: test
        args: --locked --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}

